@use 'sass:color';
@use 'sass:map';

/* Increase margin between Font Awesome icons and labels */
img + .lbl, .svg-inline--fa + .lbl {
	margin-right: 0;
	margin-left: rem(8);

	[dir='rtl'] & {
		margin-right: rem(8);
		margin-left: 0;
	}
}

/* SVG symbol class for Font Awesome */
.icon {
	width: 1em;
	height: 1em;
	vertical-align: -.125em;
}

/* Add pointer cursor */
.pointer {
	cursor: pointer;
}

/* Change the cursor to a pointer when the label is also a button */
label.btn {
	cursor: pointer;
}

/* Prevent clicking inactive buttons */
.btn.btn-inactive {
	pointer-events: none;
}

/* Allow different content depending on button status */
.btn {
	&[data-toggle='button'] {
		&.active > .inactive-content,
		&:not(.active) > .active-content {
			display: none;
		}
	}

	&[data-toggle='collapse'] {
		&.collapsed > .expanded-content,
		&:not(.collapsed) > .collapsed-content {
			display: none;
		}
	}
}

/* Increase top margin to center checkboxes vertically */
/* NOTICE: In Bootstrap 5 this will no longer be necessary */
.form-check > .form-check-input {
	@supports not (-moz-appearance: none) {
		margin-top: 0.4em;
	}
}

/* Allow different color for the button icon */
@each $color, $value in $theme-colors {
	.btn-icon-#{$color}:not(:disabled) .icon {
		color: map.get($theme-colors, $color);
	}
}

/* Fix hover style on active btn-outline-* buttons */
@each $color, $value in $theme-colors {
	$hover-background: color.adjust(map.get($theme-colors, $color), $lightness: -5%);
	$hover-border: color.adjust(map.get($theme-colors, $color), $lightness: -10%);
	.btn-outline-#{$color}.active:hover {
		color: color-yiq($hover-background) !important;
		@include gradient-bg($hover-background !important);
		border-color: $hover-border !important;
	}
}

/* Responsive version for sizes (implements twbs/bootstrap#21943) */
@each $breakpoint in map.keys($grid-breakpoints) {
	@if $breakpoint != 'xs' {
		@include media-breakpoint-up($breakpoint) {
			$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
			@each $prop, $abbrev in (width: w, height: h) {
				@each $size, $length in $sizes {
					.#{$abbrev}#{$infix}-#{$size} { #{$prop}: $length !important; }
				}
			}
		}
	}
}

/* Responsive versions for flex-grow and flex-shrink */
@each $breakpoint in map.keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);
		@each $value in 0, 1, 2, 3, 4, 5 {
			.flex#{$infix}-grow-#{$value} { flex-grow: #{$value} !important; }
			.flex#{$infix}-shrink-#{$value} { flex-grow: #{$value} !important; }
		}
	}
}

/* Implementation of a multiselect dropdown */
.dropdown-menu.dropdown-menu-multiselect > .dropdown-item {
	&:active, &:hover, &:focus {
		color: inherit;
		background-color: transparent;
	}

	> .btn-group-toggle > .btn {
		&.btn-link {
			color: inherit;
			cursor: pointer;
		}

		&::before {
			display: inline-block;
			width: 1em;
			content: '';
		}

		&.active::before {
			content: 'âœ“';
		}
	}
}

/* Make Tagify fields display correctly with Bootstrap */
.tagify.form-control {
	padding: rem(2);
	height: auto;
	font-size: 1em;
	line-height: 1.2;

	&.tagify--focus {
		color: $input-focus-color;
		background-color: $input-focus-bg;
		border-color: $input-focus-border-color;
		box-shadow: $input-focus-box-shadow;
	}

	> .tagify__input {
		margin: 0;
		line-height: $input-line-height;
	}

	> tag {
		margin: rem(2);
		max-width: rem(200);

		> div > span {
			width: 100%;

			&[contenteditable] {
				text-overflow: clip;
			}
		}
	}

	> tag > div {
		max-width: calc(100% - #{rem(14)});
		padding-top: rem(2);
		padding-bottom: rem(2);
		padding-right: rem(8);
		padding-left: rem(8);
		color: map.get($theme-colors, dark);
		transition: none;
	}

	> tag > div::before {
		box-shadow: 0 0 0 rem(20) map.get($theme-colors, light) inset;
		border: rem(1) solid color.adjust(map.get($theme-colors, dark), $lightness: 60%);
	}

	> tag:hover:not([readonly]) > div::before {
		box-shadow: 0 0 0 rem(20) map.get($theme-colors, light) inset;
		border: rem(1) solid color.adjust(map.get($theme-colors, dark), $lightness: 40%);
	}

	tag > x {
		margin-right: rem(5);
		margin-left: rem(-5);
	
		[dir="rtl"] & {
			margin-right: rem(-5);
			margin-left: rem(5);
		}
	}

	> tag > x:hover {
		background: color.adjust(map.get($theme-colors, danger), $lightness: 20%);
	}

	> tag > x:hover + div::before,
	> tag.tagify--notAllowed > div::before {
		box-shadow: 0 0 0 rem(20) color.adjust(map.get($theme-colors, danger), $lightness: 40%) inset !important;
		border: rem(1) solid color.adjust(map.get($theme-colors, danger), $lightness: 20%) !important;
	}

	> tag.tagify__tag--editable {
		> div {
			max-width: 100%;

			> .tagify__tag-text {
				margin: 0;
				padding: 0;
			}
		}

		> x {
			display: none;
		}
	}
}

/* Responsive square box */
.square-box {
	position: relative;
	width: 100%;
	overflow: hidden;

	&:before {
		display: block;
		padding-top: 100%;
		content: '';
	}

	> .square-box-content {
		position: absolute;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
	}

	&.square-box-centered {
		margin: 0 auto;

		> .square-box-content {
			display: flex;
			flex-direction: column;
			justify-content: center;
			align-items: center;
			text-align: center;
		}
	}
}
